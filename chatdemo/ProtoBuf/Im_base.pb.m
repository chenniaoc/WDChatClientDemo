// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Im_base.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImBaseRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImBaseRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL EConstSourceTypesIsValidValue(EConstSourceTypes value) {
  switch (value) {
    case EConstSourceTypesClientTypeUnknown:
    case EConstSourceTypesClientTypePcHtml:
    case EConstSourceTypesClientTypeIphoneWeidian:
    case EConstSourceTypesClientTypeIphoneKoudai:
    case EConstSourceTypesClientTypeIphoneBanjia:
    case EConstSourceTypesClientTypeIphoneDaigou:
    case EConstSourceTypesClientTypeIphoneWeidianBuyer:
    case EConstSourceTypesClientTypeAndroidWeidian:
    case EConstSourceTypesClientTypeAndroidKoudai:
    case EConstSourceTypesClientTypeAndroidBanjia:
    case EConstSourceTypesClientTypeAndroidDaigou:
    case EConstSourceTypesClientTypeAndroidWeidianBuyer:
    case EConstSourceTypesClientTypeIpadWeidian:
    case EConstSourceTypesClientTypeIpadKoudai:
    case EConstSourceTypesClientTypeIpadBanjia:
    case EConstSourceTypesClientTypeIpadDaigou:
    case EConstSourceTypesClientTypeIpadWeidianBuyer:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEConstSourceTypes(EConstSourceTypes value) {
  switch (value) {
    case EConstSourceTypesClientTypeUnknown:
      return @"EConstSourceTypesClientTypeUnknown";
    case EConstSourceTypesClientTypePcHtml:
      return @"EConstSourceTypesClientTypePcHtml";
    case EConstSourceTypesClientTypeIphoneWeidian:
      return @"EConstSourceTypesClientTypeIphoneWeidian";
    case EConstSourceTypesClientTypeIphoneKoudai:
      return @"EConstSourceTypesClientTypeIphoneKoudai";
    case EConstSourceTypesClientTypeIphoneBanjia:
      return @"EConstSourceTypesClientTypeIphoneBanjia";
    case EConstSourceTypesClientTypeIphoneDaigou:
      return @"EConstSourceTypesClientTypeIphoneDaigou";
    case EConstSourceTypesClientTypeIphoneWeidianBuyer:
      return @"EConstSourceTypesClientTypeIphoneWeidianBuyer";
    case EConstSourceTypesClientTypeAndroidWeidian:
      return @"EConstSourceTypesClientTypeAndroidWeidian";
    case EConstSourceTypesClientTypeAndroidKoudai:
      return @"EConstSourceTypesClientTypeAndroidKoudai";
    case EConstSourceTypesClientTypeAndroidBanjia:
      return @"EConstSourceTypesClientTypeAndroidBanjia";
    case EConstSourceTypesClientTypeAndroidDaigou:
      return @"EConstSourceTypesClientTypeAndroidDaigou";
    case EConstSourceTypesClientTypeAndroidWeidianBuyer:
      return @"EConstSourceTypesClientTypeAndroidWeidianBuyer";
    case EConstSourceTypesClientTypeIpadWeidian:
      return @"EConstSourceTypesClientTypeIpadWeidian";
    case EConstSourceTypesClientTypeIpadKoudai:
      return @"EConstSourceTypesClientTypeIpadKoudai";
    case EConstSourceTypesClientTypeIpadBanjia:
      return @"EConstSourceTypesClientTypeIpadBanjia";
    case EConstSourceTypesClientTypeIpadDaigou:
      return @"EConstSourceTypesClientTypeIpadDaigou";
    case EConstSourceTypesClientTypeIpadWeidianBuyer:
      return @"EConstSourceTypesClientTypeIpadWeidianBuyer";
    default:
      return nil;
  }
}

BOOL EConstPackTypesIsValidValue(EConstPackTypes value) {
  switch (value) {
    case EConstPackTypesPackTypeReq:
    case EConstPackTypesPackTypeResp:
    case EConstPackTypesPackTypeNotify:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEConstPackTypes(EConstPackTypes value) {
  switch (value) {
    case EConstPackTypesPackTypeReq:
      return @"EConstPackTypesPackTypeReq";
    case EConstPackTypesPackTypeResp:
      return @"EConstPackTypesPackTypeResp";
    case EConstPackTypesPackTypeNotify:
      return @"EConstPackTypesPackTypeNotify";
    default:
      return nil;
  }
}

BOOL EConstPBRespCodesIsValidValue(EConstPBRespCodes value) {
  switch (value) {
    case EConstPBRespCodesPbRespSuccess:
    case EConstPBRespCodesPbRespClientError:
    case EConstPBRespCodesPbRespClientLackParam:
    case EConstPBRespCodesPbRespServerError:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromEConstPBRespCodes(EConstPBRespCodes value) {
  switch (value) {
    case EConstPBRespCodesPbRespSuccess:
      return @"EConstPBRespCodesPbRespSuccess";
    case EConstPBRespCodesPbRespClientError:
      return @"EConstPBRespCodesPbRespClientError";
    case EConstPBRespCodesPbRespClientLackParam:
      return @"EConstPBRespCodesPbRespClientLackParam";
    case EConstPBRespCodesPbRespServerError:
      return @"EConstPBRespCodesPbRespServerError";
    default:
      return nil;
  }
}

@interface CProtocolClientReq ()
@property (strong) NSString* cmd;
@property (strong) NSString* subCmd;
@property (strong) NSString* version;
@property UInt64 uid;
@property UInt32 seq;
@property EConstSourceTypes sourceType;
@property (strong) NSData* protocolContent;
@property (strong) NSData* vcodeSession;
@property (strong) NSData* vcodeUsdata;
@end

@implementation CProtocolClientReq

- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) _value_ {
  hasCmd_ = !!_value_;
}
@synthesize cmd;
- (BOOL) hasSubCmd {
  return !!hasSubCmd_;
}
- (void) setHasSubCmd:(BOOL) _value_ {
  hasSubCmd_ = !!_value_;
}
@synthesize subCmd;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasSeq {
  return !!hasSeq_;
}
- (void) setHasSeq:(BOOL) _value_ {
  hasSeq_ = !!_value_;
}
@synthesize seq;
- (BOOL) hasSourceType {
  return !!hasSourceType_;
}
- (void) setHasSourceType:(BOOL) _value_ {
  hasSourceType_ = !!_value_;
}
@synthesize sourceType;
- (BOOL) hasProtocolContent {
  return !!hasProtocolContent_;
}
- (void) setHasProtocolContent:(BOOL) _value_ {
  hasProtocolContent_ = !!_value_;
}
@synthesize protocolContent;
- (BOOL) hasVcodeSession {
  return !!hasVcodeSession_;
}
- (void) setHasVcodeSession:(BOOL) _value_ {
  hasVcodeSession_ = !!_value_;
}
@synthesize vcodeSession;
- (BOOL) hasVcodeUsdata {
  return !!hasVcodeUsdata_;
}
- (void) setHasVcodeUsdata:(BOOL) _value_ {
  hasVcodeUsdata_ = !!_value_;
}
@synthesize vcodeUsdata;
- (instancetype) init {
  if ((self = [super init])) {
    self.cmd = @"";
    self.subCmd = @"";
    self.version = @"";
    self.uid = 0L;
    self.seq = 0;
    self.sourceType = EConstSourceTypesClientTypeUnknown;
    self.protocolContent = [NSData data];
    self.vcodeSession = [NSData data];
    self.vcodeUsdata = [NSData data];
  }
  return self;
}
static CProtocolClientReq* defaultCProtocolClientReqInstance = nil;
+ (void) initialize {
  if (self == [CProtocolClientReq class]) {
    defaultCProtocolClientReqInstance = [[CProtocolClientReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCProtocolClientReqInstance;
}
- (instancetype) defaultInstance {
  return defaultCProtocolClientReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmd) {
    [output writeString:1 value:self.cmd];
  }
  if (self.hasSubCmd) {
    [output writeString:2 value:self.subCmd];
  }
  if (self.hasVersion) {
    [output writeString:3 value:self.version];
  }
  if (self.hasUid) {
    [output writeUInt64:4 value:self.uid];
  }
  if (self.hasSeq) {
    [output writeUInt32:5 value:self.seq];
  }
  if (self.hasSourceType) {
    [output writeEnum:6 value:self.sourceType];
  }
  if (self.hasProtocolContent) {
    [output writeData:7 value:self.protocolContent];
  }
  if (self.hasVcodeSession) {
    [output writeData:8 value:self.vcodeSession];
  }
  if (self.hasVcodeUsdata) {
    [output writeData:9 value:self.vcodeUsdata];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmd) {
    size_ += computeStringSize(1, self.cmd);
  }
  if (self.hasSubCmd) {
    size_ += computeStringSize(2, self.subCmd);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(3, self.version);
  }
  if (self.hasUid) {
    size_ += computeUInt64Size(4, self.uid);
  }
  if (self.hasSeq) {
    size_ += computeUInt32Size(5, self.seq);
  }
  if (self.hasSourceType) {
    size_ += computeEnumSize(6, self.sourceType);
  }
  if (self.hasProtocolContent) {
    size_ += computeDataSize(7, self.protocolContent);
  }
  if (self.hasVcodeSession) {
    size_ += computeDataSize(8, self.vcodeSession);
  }
  if (self.hasVcodeUsdata) {
    size_ += computeDataSize(9, self.vcodeUsdata);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CProtocolClientReq*) parseFromData:(NSData*) data {
  return (CProtocolClientReq*)[[[CProtocolClientReq builder] mergeFromData:data] build];
}
+ (CProtocolClientReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CProtocolClientReq*)[[[CProtocolClientReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CProtocolClientReq*) parseFromInputStream:(NSInputStream*) input {
  return (CProtocolClientReq*)[[[CProtocolClientReq builder] mergeFromInputStream:input] build];
}
+ (CProtocolClientReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CProtocolClientReq*)[[[CProtocolClientReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CProtocolClientReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CProtocolClientReq*)[[[CProtocolClientReq builder] mergeFromCodedInputStream:input] build];
}
+ (CProtocolClientReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CProtocolClientReq*)[[[CProtocolClientReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CProtocolClientReqBuilder*) builder {
  return [[CProtocolClientReqBuilder alloc] init];
}
+ (CProtocolClientReqBuilder*) builderWithPrototype:(CProtocolClientReq*) prototype {
  return [[CProtocolClientReq builder] mergeFrom:prototype];
}
- (CProtocolClientReqBuilder*) builder {
  return [CProtocolClientReq builder];
}
- (CProtocolClientReqBuilder*) toBuilder {
  return [CProtocolClientReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", self.cmd];
  }
  if (self.hasSubCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subCmd", self.subCmd];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithLongLong:self.uid]];
  }
  if (self.hasSeq) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seq", [NSNumber numberWithInteger:self.seq]];
  }
  if (self.hasSourceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceType", NSStringFromEConstSourceTypes(self.sourceType)];
  }
  if (self.hasProtocolContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolContent", self.protocolContent];
  }
  if (self.hasVcodeSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcodeSession", self.vcodeSession];
  }
  if (self.hasVcodeUsdata) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcodeUsdata", self.vcodeUsdata];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CProtocolClientReq class]]) {
    return NO;
  }
  CProtocolClientReq *otherMessage = other;
  return
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || [self.cmd isEqual:otherMessage.cmd]) &&
      self.hasSubCmd == otherMessage.hasSubCmd &&
      (!self.hasSubCmd || [self.subCmd isEqual:otherMessage.subCmd]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasSeq == otherMessage.hasSeq &&
      (!self.hasSeq || self.seq == otherMessage.seq) &&
      self.hasSourceType == otherMessage.hasSourceType &&
      (!self.hasSourceType || self.sourceType == otherMessage.sourceType) &&
      self.hasProtocolContent == otherMessage.hasProtocolContent &&
      (!self.hasProtocolContent || [self.protocolContent isEqual:otherMessage.protocolContent]) &&
      self.hasVcodeSession == otherMessage.hasVcodeSession &&
      (!self.hasVcodeSession || [self.vcodeSession isEqual:otherMessage.vcodeSession]) &&
      self.hasVcodeUsdata == otherMessage.hasVcodeUsdata &&
      (!self.hasVcodeUsdata || [self.vcodeUsdata isEqual:otherMessage.vcodeUsdata]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmd) {
    hashCode = hashCode * 31 + [self.cmd hash];
  }
  if (self.hasSubCmd) {
    hashCode = hashCode * 31 + [self.subCmd hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.uid] hash];
  }
  if (self.hasSeq) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seq] hash];
  }
  if (self.hasSourceType) {
    hashCode = hashCode * 31 + self.sourceType;
  }
  if (self.hasProtocolContent) {
    hashCode = hashCode * 31 + [self.protocolContent hash];
  }
  if (self.hasVcodeSession) {
    hashCode = hashCode * 31 + [self.vcodeSession hash];
  }
  if (self.hasVcodeUsdata) {
    hashCode = hashCode * 31 + [self.vcodeUsdata hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CProtocolClientReqBuilder()
@property (strong) CProtocolClientReq* resultCprotocolClientReq;
@end

@implementation CProtocolClientReqBuilder
@synthesize resultCprotocolClientReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCprotocolClientReq = [[CProtocolClientReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCprotocolClientReq;
}
- (CProtocolClientReqBuilder*) clear {
  self.resultCprotocolClientReq = [[CProtocolClientReq alloc] init];
  return self;
}
- (CProtocolClientReqBuilder*) clone {
  return [CProtocolClientReq builderWithPrototype:resultCprotocolClientReq];
}
- (CProtocolClientReq*) defaultInstance {
  return [CProtocolClientReq defaultInstance];
}
- (CProtocolClientReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CProtocolClientReq*) buildPartial {
  CProtocolClientReq* returnMe = resultCprotocolClientReq;
  self.resultCprotocolClientReq = nil;
  return returnMe;
}
- (CProtocolClientReqBuilder*) mergeFrom:(CProtocolClientReq*) other {
  if (other == [CProtocolClientReq defaultInstance]) {
    return self;
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasSubCmd) {
    [self setSubCmd:other.subCmd];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasSeq) {
    [self setSeq:other.seq];
  }
  if (other.hasSourceType) {
    [self setSourceType:other.sourceType];
  }
  if (other.hasProtocolContent) {
    [self setProtocolContent:other.protocolContent];
  }
  if (other.hasVcodeSession) {
    [self setVcodeSession:other.vcodeSession];
  }
  if (other.hasVcodeUsdata) {
    [self setVcodeUsdata:other.vcodeUsdata];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CProtocolClientReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CProtocolClientReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCmd:[input readString]];
        break;
      }
      case 18: {
        [self setSubCmd:[input readString]];
        break;
      }
      case 26: {
        [self setVersion:[input readString]];
        break;
      }
      case 32: {
        [self setUid:[input readUInt64]];
        break;
      }
      case 40: {
        [self setSeq:[input readUInt32]];
        break;
      }
      case 48: {
        EConstSourceTypes value = (EConstSourceTypes)[input readEnum];
        if (EConstSourceTypesIsValidValue(value)) {
          [self setSourceType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        [self setProtocolContent:[input readData]];
        break;
      }
      case 66: {
        [self setVcodeSession:[input readData]];
        break;
      }
      case 74: {
        [self setVcodeUsdata:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasCmd {
  return resultCprotocolClientReq.hasCmd;
}
- (NSString*) cmd {
  return resultCprotocolClientReq.cmd;
}
- (CProtocolClientReqBuilder*) setCmd:(NSString*) value {
  resultCprotocolClientReq.hasCmd = YES;
  resultCprotocolClientReq.cmd = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearCmd {
  resultCprotocolClientReq.hasCmd = NO;
  resultCprotocolClientReq.cmd = @"";
  return self;
}
- (BOOL) hasSubCmd {
  return resultCprotocolClientReq.hasSubCmd;
}
- (NSString*) subCmd {
  return resultCprotocolClientReq.subCmd;
}
- (CProtocolClientReqBuilder*) setSubCmd:(NSString*) value {
  resultCprotocolClientReq.hasSubCmd = YES;
  resultCprotocolClientReq.subCmd = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearSubCmd {
  resultCprotocolClientReq.hasSubCmd = NO;
  resultCprotocolClientReq.subCmd = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultCprotocolClientReq.hasVersion;
}
- (NSString*) version {
  return resultCprotocolClientReq.version;
}
- (CProtocolClientReqBuilder*) setVersion:(NSString*) value {
  resultCprotocolClientReq.hasVersion = YES;
  resultCprotocolClientReq.version = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearVersion {
  resultCprotocolClientReq.hasVersion = NO;
  resultCprotocolClientReq.version = @"";
  return self;
}
- (BOOL) hasUid {
  return resultCprotocolClientReq.hasUid;
}
- (UInt64) uid {
  return resultCprotocolClientReq.uid;
}
- (CProtocolClientReqBuilder*) setUid:(UInt64) value {
  resultCprotocolClientReq.hasUid = YES;
  resultCprotocolClientReq.uid = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearUid {
  resultCprotocolClientReq.hasUid = NO;
  resultCprotocolClientReq.uid = 0L;
  return self;
}
- (BOOL) hasSeq {
  return resultCprotocolClientReq.hasSeq;
}
- (UInt32) seq {
  return resultCprotocolClientReq.seq;
}
- (CProtocolClientReqBuilder*) setSeq:(UInt32) value {
  resultCprotocolClientReq.hasSeq = YES;
  resultCprotocolClientReq.seq = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearSeq {
  resultCprotocolClientReq.hasSeq = NO;
  resultCprotocolClientReq.seq = 0;
  return self;
}
- (BOOL) hasSourceType {
  return resultCprotocolClientReq.hasSourceType;
}
- (EConstSourceTypes) sourceType {
  return resultCprotocolClientReq.sourceType;
}
- (CProtocolClientReqBuilder*) setSourceType:(EConstSourceTypes) value {
  resultCprotocolClientReq.hasSourceType = YES;
  resultCprotocolClientReq.sourceType = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearSourceType {
  resultCprotocolClientReq.hasSourceType = NO;
  resultCprotocolClientReq.sourceType = EConstSourceTypesClientTypeUnknown;
  return self;
}
- (BOOL) hasProtocolContent {
  return resultCprotocolClientReq.hasProtocolContent;
}
- (NSData*) protocolContent {
  return resultCprotocolClientReq.protocolContent;
}
- (CProtocolClientReqBuilder*) setProtocolContent:(NSData*) value {
  resultCprotocolClientReq.hasProtocolContent = YES;
  resultCprotocolClientReq.protocolContent = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearProtocolContent {
  resultCprotocolClientReq.hasProtocolContent = NO;
  resultCprotocolClientReq.protocolContent = [NSData data];
  return self;
}
- (BOOL) hasVcodeSession {
  return resultCprotocolClientReq.hasVcodeSession;
}
- (NSData*) vcodeSession {
  return resultCprotocolClientReq.vcodeSession;
}
- (CProtocolClientReqBuilder*) setVcodeSession:(NSData*) value {
  resultCprotocolClientReq.hasVcodeSession = YES;
  resultCprotocolClientReq.vcodeSession = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearVcodeSession {
  resultCprotocolClientReq.hasVcodeSession = NO;
  resultCprotocolClientReq.vcodeSession = [NSData data];
  return self;
}
- (BOOL) hasVcodeUsdata {
  return resultCprotocolClientReq.hasVcodeUsdata;
}
- (NSData*) vcodeUsdata {
  return resultCprotocolClientReq.vcodeUsdata;
}
- (CProtocolClientReqBuilder*) setVcodeUsdata:(NSData*) value {
  resultCprotocolClientReq.hasVcodeUsdata = YES;
  resultCprotocolClientReq.vcodeUsdata = value;
  return self;
}
- (CProtocolClientReqBuilder*) clearVcodeUsdata {
  resultCprotocolClientReq.hasVcodeUsdata = NO;
  resultCprotocolClientReq.vcodeUsdata = [NSData data];
  return self;
}
@end

@interface CProtocolServerResp ()
@property (strong) NSString* cmd;
@property (strong) NSString* subCmd;
@property (strong) NSString* version;
@property UInt64 uid;
@property UInt32 seq;
@property EConstPackTypes type;
@property UInt32 code;
@property (strong) NSData* protocolContent;
@property (strong) NSData* vcodeSession;
@property (strong) NSString* vcodePicdata;
@end

@implementation CProtocolServerResp

- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) _value_ {
  hasCmd_ = !!_value_;
}
@synthesize cmd;
- (BOOL) hasSubCmd {
  return !!hasSubCmd_;
}
- (void) setHasSubCmd:(BOOL) _value_ {
  hasSubCmd_ = !!_value_;
}
@synthesize subCmd;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasSeq {
  return !!hasSeq_;
}
- (void) setHasSeq:(BOOL) _value_ {
  hasSeq_ = !!_value_;
}
@synthesize seq;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasProtocolContent {
  return !!hasProtocolContent_;
}
- (void) setHasProtocolContent:(BOOL) _value_ {
  hasProtocolContent_ = !!_value_;
}
@synthesize protocolContent;
- (BOOL) hasVcodeSession {
  return !!hasVcodeSession_;
}
- (void) setHasVcodeSession:(BOOL) _value_ {
  hasVcodeSession_ = !!_value_;
}
@synthesize vcodeSession;
- (BOOL) hasVcodePicdata {
  return !!hasVcodePicdata_;
}
- (void) setHasVcodePicdata:(BOOL) _value_ {
  hasVcodePicdata_ = !!_value_;
}
@synthesize vcodePicdata;
- (instancetype) init {
  if ((self = [super init])) {
    self.cmd = @"";
    self.subCmd = @"";
    self.version = @"";
    self.uid = 0L;
    self.seq = 0;
    self.type = EConstPackTypesPackTypeReq;
    self.code = 0;
    self.protocolContent = [NSData data];
    self.vcodeSession = [NSData data];
    self.vcodePicdata = @"";
  }
  return self;
}
static CProtocolServerResp* defaultCProtocolServerRespInstance = nil;
+ (void) initialize {
  if (self == [CProtocolServerResp class]) {
    defaultCProtocolServerRespInstance = [[CProtocolServerResp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCProtocolServerRespInstance;
}
- (instancetype) defaultInstance {
  return defaultCProtocolServerRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmd) {
    [output writeString:1 value:self.cmd];
  }
  if (self.hasSubCmd) {
    [output writeString:2 value:self.subCmd];
  }
  if (self.hasVersion) {
    [output writeString:3 value:self.version];
  }
  if (self.hasUid) {
    [output writeUInt64:4 value:self.uid];
  }
  if (self.hasSeq) {
    [output writeUInt32:5 value:self.seq];
  }
  if (self.hasType) {
    [output writeEnum:6 value:self.type];
  }
  if (self.hasCode) {
    [output writeUInt32:7 value:self.code];
  }
  if (self.hasProtocolContent) {
    [output writeData:8 value:self.protocolContent];
  }
  if (self.hasVcodeSession) {
    [output writeData:9 value:self.vcodeSession];
  }
  if (self.hasVcodePicdata) {
    [output writeString:10 value:self.vcodePicdata];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmd) {
    size_ += computeStringSize(1, self.cmd);
  }
  if (self.hasSubCmd) {
    size_ += computeStringSize(2, self.subCmd);
  }
  if (self.hasVersion) {
    size_ += computeStringSize(3, self.version);
  }
  if (self.hasUid) {
    size_ += computeUInt64Size(4, self.uid);
  }
  if (self.hasSeq) {
    size_ += computeUInt32Size(5, self.seq);
  }
  if (self.hasType) {
    size_ += computeEnumSize(6, self.type);
  }
  if (self.hasCode) {
    size_ += computeUInt32Size(7, self.code);
  }
  if (self.hasProtocolContent) {
    size_ += computeDataSize(8, self.protocolContent);
  }
  if (self.hasVcodeSession) {
    size_ += computeDataSize(9, self.vcodeSession);
  }
  if (self.hasVcodePicdata) {
    size_ += computeStringSize(10, self.vcodePicdata);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CProtocolServerResp*) parseFromData:(NSData*) data {
  return (CProtocolServerResp*)[[[CProtocolServerResp builder] mergeFromData:data] build];
}
+ (CProtocolServerResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CProtocolServerResp*)[[[CProtocolServerResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CProtocolServerResp*) parseFromInputStream:(NSInputStream*) input {
  return (CProtocolServerResp*)[[[CProtocolServerResp builder] mergeFromInputStream:input] build];
}
+ (CProtocolServerResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CProtocolServerResp*)[[[CProtocolServerResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CProtocolServerResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CProtocolServerResp*)[[[CProtocolServerResp builder] mergeFromCodedInputStream:input] build];
}
+ (CProtocolServerResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CProtocolServerResp*)[[[CProtocolServerResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CProtocolServerRespBuilder*) builder {
  return [[CProtocolServerRespBuilder alloc] init];
}
+ (CProtocolServerRespBuilder*) builderWithPrototype:(CProtocolServerResp*) prototype {
  return [[CProtocolServerResp builder] mergeFrom:prototype];
}
- (CProtocolServerRespBuilder*) builder {
  return [CProtocolServerResp builder];
}
- (CProtocolServerRespBuilder*) toBuilder {
  return [CProtocolServerResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", self.cmd];
  }
  if (self.hasSubCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subCmd", self.subCmd];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithLongLong:self.uid]];
  }
  if (self.hasSeq) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seq", [NSNumber numberWithInteger:self.seq]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromEConstPackTypes(self.type)];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasProtocolContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolContent", self.protocolContent];
  }
  if (self.hasVcodeSession) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcodeSession", self.vcodeSession];
  }
  if (self.hasVcodePicdata) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcodePicdata", self.vcodePicdata];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CProtocolServerResp class]]) {
    return NO;
  }
  CProtocolServerResp *otherMessage = other;
  return
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || [self.cmd isEqual:otherMessage.cmd]) &&
      self.hasSubCmd == otherMessage.hasSubCmd &&
      (!self.hasSubCmd || [self.subCmd isEqual:otherMessage.subCmd]) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasSeq == otherMessage.hasSeq &&
      (!self.hasSeq || self.seq == otherMessage.seq) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasProtocolContent == otherMessage.hasProtocolContent &&
      (!self.hasProtocolContent || [self.protocolContent isEqual:otherMessage.protocolContent]) &&
      self.hasVcodeSession == otherMessage.hasVcodeSession &&
      (!self.hasVcodeSession || [self.vcodeSession isEqual:otherMessage.vcodeSession]) &&
      self.hasVcodePicdata == otherMessage.hasVcodePicdata &&
      (!self.hasVcodePicdata || [self.vcodePicdata isEqual:otherMessage.vcodePicdata]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmd) {
    hashCode = hashCode * 31 + [self.cmd hash];
  }
  if (self.hasSubCmd) {
    hashCode = hashCode * 31 + [self.subCmd hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.uid] hash];
  }
  if (self.hasSeq) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seq] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasProtocolContent) {
    hashCode = hashCode * 31 + [self.protocolContent hash];
  }
  if (self.hasVcodeSession) {
    hashCode = hashCode * 31 + [self.vcodeSession hash];
  }
  if (self.hasVcodePicdata) {
    hashCode = hashCode * 31 + [self.vcodePicdata hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CProtocolServerRespBuilder()
@property (strong) CProtocolServerResp* resultCprotocolServerResp;
@end

@implementation CProtocolServerRespBuilder
@synthesize resultCprotocolServerResp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCprotocolServerResp = [[CProtocolServerResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCprotocolServerResp;
}
- (CProtocolServerRespBuilder*) clear {
  self.resultCprotocolServerResp = [[CProtocolServerResp alloc] init];
  return self;
}
- (CProtocolServerRespBuilder*) clone {
  return [CProtocolServerResp builderWithPrototype:resultCprotocolServerResp];
}
- (CProtocolServerResp*) defaultInstance {
  return [CProtocolServerResp defaultInstance];
}
- (CProtocolServerResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CProtocolServerResp*) buildPartial {
  CProtocolServerResp* returnMe = resultCprotocolServerResp;
  self.resultCprotocolServerResp = nil;
  return returnMe;
}
- (CProtocolServerRespBuilder*) mergeFrom:(CProtocolServerResp*) other {
  if (other == [CProtocolServerResp defaultInstance]) {
    return self;
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasSubCmd) {
    [self setSubCmd:other.subCmd];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasSeq) {
    [self setSeq:other.seq];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasProtocolContent) {
    [self setProtocolContent:other.protocolContent];
  }
  if (other.hasVcodeSession) {
    [self setVcodeSession:other.vcodeSession];
  }
  if (other.hasVcodePicdata) {
    [self setVcodePicdata:other.vcodePicdata];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CProtocolServerRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CProtocolServerRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCmd:[input readString]];
        break;
      }
      case 18: {
        [self setSubCmd:[input readString]];
        break;
      }
      case 26: {
        [self setVersion:[input readString]];
        break;
      }
      case 32: {
        [self setUid:[input readUInt64]];
        break;
      }
      case 40: {
        [self setSeq:[input readUInt32]];
        break;
      }
      case 48: {
        EConstPackTypes value = (EConstPackTypes)[input readEnum];
        if (EConstPackTypesIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 66: {
        [self setProtocolContent:[input readData]];
        break;
      }
      case 74: {
        [self setVcodeSession:[input readData]];
        break;
      }
      case 82: {
        [self setVcodePicdata:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmd {
  return resultCprotocolServerResp.hasCmd;
}
- (NSString*) cmd {
  return resultCprotocolServerResp.cmd;
}
- (CProtocolServerRespBuilder*) setCmd:(NSString*) value {
  resultCprotocolServerResp.hasCmd = YES;
  resultCprotocolServerResp.cmd = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearCmd {
  resultCprotocolServerResp.hasCmd = NO;
  resultCprotocolServerResp.cmd = @"";
  return self;
}
- (BOOL) hasSubCmd {
  return resultCprotocolServerResp.hasSubCmd;
}
- (NSString*) subCmd {
  return resultCprotocolServerResp.subCmd;
}
- (CProtocolServerRespBuilder*) setSubCmd:(NSString*) value {
  resultCprotocolServerResp.hasSubCmd = YES;
  resultCprotocolServerResp.subCmd = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearSubCmd {
  resultCprotocolServerResp.hasSubCmd = NO;
  resultCprotocolServerResp.subCmd = @"";
  return self;
}
- (BOOL) hasVersion {
  return resultCprotocolServerResp.hasVersion;
}
- (NSString*) version {
  return resultCprotocolServerResp.version;
}
- (CProtocolServerRespBuilder*) setVersion:(NSString*) value {
  resultCprotocolServerResp.hasVersion = YES;
  resultCprotocolServerResp.version = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearVersion {
  resultCprotocolServerResp.hasVersion = NO;
  resultCprotocolServerResp.version = @"";
  return self;
}
- (BOOL) hasUid {
  return resultCprotocolServerResp.hasUid;
}
- (UInt64) uid {
  return resultCprotocolServerResp.uid;
}
- (CProtocolServerRespBuilder*) setUid:(UInt64) value {
  resultCprotocolServerResp.hasUid = YES;
  resultCprotocolServerResp.uid = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearUid {
  resultCprotocolServerResp.hasUid = NO;
  resultCprotocolServerResp.uid = 0L;
  return self;
}
- (BOOL) hasSeq {
  return resultCprotocolServerResp.hasSeq;
}
- (UInt32) seq {
  return resultCprotocolServerResp.seq;
}
- (CProtocolServerRespBuilder*) setSeq:(UInt32) value {
  resultCprotocolServerResp.hasSeq = YES;
  resultCprotocolServerResp.seq = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearSeq {
  resultCprotocolServerResp.hasSeq = NO;
  resultCprotocolServerResp.seq = 0;
  return self;
}
- (BOOL) hasType {
  return resultCprotocolServerResp.hasType;
}
- (EConstPackTypes) type {
  return resultCprotocolServerResp.type;
}
- (CProtocolServerRespBuilder*) setType:(EConstPackTypes) value {
  resultCprotocolServerResp.hasType = YES;
  resultCprotocolServerResp.type = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearType {
  resultCprotocolServerResp.hasType = NO;
  resultCprotocolServerResp.type = EConstPackTypesPackTypeReq;
  return self;
}
- (BOOL) hasCode {
  return resultCprotocolServerResp.hasCode;
}
- (UInt32) code {
  return resultCprotocolServerResp.code;
}
- (CProtocolServerRespBuilder*) setCode:(UInt32) value {
  resultCprotocolServerResp.hasCode = YES;
  resultCprotocolServerResp.code = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearCode {
  resultCprotocolServerResp.hasCode = NO;
  resultCprotocolServerResp.code = 0;
  return self;
}
- (BOOL) hasProtocolContent {
  return resultCprotocolServerResp.hasProtocolContent;
}
- (NSData*) protocolContent {
  return resultCprotocolServerResp.protocolContent;
}
- (CProtocolServerRespBuilder*) setProtocolContent:(NSData*) value {
  resultCprotocolServerResp.hasProtocolContent = YES;
  resultCprotocolServerResp.protocolContent = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearProtocolContent {
  resultCprotocolServerResp.hasProtocolContent = NO;
  resultCprotocolServerResp.protocolContent = [NSData data];
  return self;
}
- (BOOL) hasVcodeSession {
  return resultCprotocolServerResp.hasVcodeSession;
}
- (NSData*) vcodeSession {
  return resultCprotocolServerResp.vcodeSession;
}
- (CProtocolServerRespBuilder*) setVcodeSession:(NSData*) value {
  resultCprotocolServerResp.hasVcodeSession = YES;
  resultCprotocolServerResp.vcodeSession = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearVcodeSession {
  resultCprotocolServerResp.hasVcodeSession = NO;
  resultCprotocolServerResp.vcodeSession = [NSData data];
  return self;
}
- (BOOL) hasVcodePicdata {
  return resultCprotocolServerResp.hasVcodePicdata;
}
- (NSString*) vcodePicdata {
  return resultCprotocolServerResp.vcodePicdata;
}
- (CProtocolServerRespBuilder*) setVcodePicdata:(NSString*) value {
  resultCprotocolServerResp.hasVcodePicdata = YES;
  resultCprotocolServerResp.vcodePicdata = value;
  return self;
}
- (CProtocolServerRespBuilder*) clearVcodePicdata {
  resultCprotocolServerResp.hasVcodePicdata = NO;
  resultCprotocolServerResp.vcodePicdata = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
